name: ESP32

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
on:
  push:
  pull_request:
    paths-ignore:
      - "examples/**"
      - "README.md"
      - "ci/*unix*.sh"
      - ".github/workflows/build_unix.yml"

jobs:
  tensorflow_micropython_esp32_build:
    runs-on: ubuntu-latest
    container:
      image: espressif/idf:release-v4.3
    steps:
      - name: setup
        run: |
          apt update
          apt install git 
          apt-get remove nodejs
          apt-get remove npm
          git config --global --add safe.directory /__w/tensorflow-micropython-examples/tensorflow-micropython-examples

      - name: Prepare to Build Tensorflow Micropython Firmware for ESP32
        run: |
          git clone https://github.com/tugra103/tensorflow-micropython-examples.git
          cd tensorflow-micropython-examples
          pwd
          git submodule init
          git submodule update --recursive
          cd micropython
          git submodule update --init lib/axtls
          git submodule update --init lib/berkeley-db-1.xx
          cd ports/esp32
          make BOARD= submodules
          cd ../../..
          cd tflm_esp_kernels
          git submodule update --init components/esp32-camera
          git submodule update --init components/esp-nn
      - name: Get Cache Keys
        # later get this like this: git ls-remote --heads https://github.com/espressif/esp-idf
        # this commit is hard-coded in micropython/tools/ci.sh
        run: |
          IDF_COMMIT=142bb32c50fa9875b8b69fa539a2d59559460d72
          echo "esp-idf-commit=$IDF_COMMIT" >> $GITHUB_ENV
          TFLM_COMMIT=$(git submodule status tensorflow | awk '{print ($1)}')
          echo "tflm-commit=$TFLM_COMMIT" >> $GITHUB_ENV
      #      - name: Cache esp-idf
      #        id: cache-esp-idf
      #        uses: actions/cache@v2
      #        env:
      #          cache-name: cache-esp-idf
      #        with:
      #          path: ./esp-idf
      #          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.esp-idf-commit }}
      - name: Setup Build for Tensorflow
#        if: steps.cache-tflm.outputs.cache-hit != 'true'
        run: |
          pip3 install Pillow
          pip3 install Wave

          echo "Regenerating microlite/tfm directory"
          rm -rf ./micropython-modules/microlite/tflm

          cd /__w/tensorflow-micropython-examples/tensorflow-micropython-examples/tensorflow-micropython-examples/tensorflow

          ../micropython-modules/microlite/prepare-tflm-esp.sh

      - name: Build micropython cross compiler
        run: |
          cd /__w/tensorflow-micropython-examples/tensorflow-micropython-examples/tensorflow-micropython-examples
          cd ./micropython
          echo "make -C mpy-cross V=1 clean all"
          make -C mpy-cross V=1 clean all

     
      - name: Build MICROLITE_SPIRAM_CAM
        run: |

          . ./esp-idf/export.sh

          echo "cd ./boards/esp32/MICROLITE_SPIRAM_CAM"
          cd ./boards/esp32/MICROLITE_SPIRAM_CAM

          echo "Building MICROLITE_SPIRAM_CAM"
          rm -rf builds
          idf.py clean build

          ../../../micropython-modules/microlite/assemble-unified-image-esp.sh \
          ../../../micropython/ports/esp32

      - name: Archive ESP32-MICROLITE_SPIRAM_CAM firmware
        uses: actions/upload-artifact@v4
        with:
          name: microlite-spiram-cam-esp32-firmware
          path: |
            boards/esp32/MICROLITE_SPIRAM_CAM/build/firmware.bin
